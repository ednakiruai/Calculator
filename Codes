import tkinter as tk  # Import the tkinter module for GUI

# Global variable to store the calculation
calculation = ""

def add_to_calculation(symbol):
    """Appends the clicked button's symbol to the calculation, ensuring no consecutive operators."""
    global calculation
    symbol = str(symbol)  # Ensure symbol is always treated as a string
    
    # If the calculation is "Result", reset the calculation to allow new input
    if calculation == "Result":
        calculation = ""  # Reset the calculation string after a result is shown
    
    # Prevent multiple consecutive operators
    if calculation and calculation[-1] in "+-*/" and symbol in "+-*/":
        return  # Prevent multiple consecutive operators
    
    # If the calculation is a result, treat it as a base for the new calculation
    if calculation == "Result":
        calculation = symbol
    else:
        calculation += symbol  # Append the symbol to the calculation string
    
    text_result.delete(1.0, "end")  # Clear the display
    text_result.insert(1.0, calculation)  # Display the updated calculation

def evaluate_calculation():
    """Evaluates the current calculation and displays the result."""
    global calculation
    try:
        result = str(eval(calculation))  # Evaluate the mathematical expression
        calculation = result  # Store the result for further calculations
        text_result.delete(1.0, "end")  # Clear the display
        text_result.insert(1.0, result)  # Display the result
    except:
        clear_field()  # Clear the display if an error occurs
        text_result.insert(1.0, "Error")  # Show an error message

def clear_field():
    """Clears the calculation field and resets the stored calculation."""
    global calculation
    calculation = ""  # Reset the calculation string
    text_result.delete(1.0, "end")  # Clear the display

def on_enter(event):
    """Changes button background color when hovered over."""
    event.widget.config(bg="lightgray")

def on_leave(event):
    """Resets button background color when hover is removed.""" 
    event.widget.config(bg="SystemButtonFace")

# Initialize the main application window
root = tk.Tk()
root.geometry("350x300")  # Set window size
root.title("Group 1 Calculator")  # Set window title

# Create the display field
text_result = tk.Text(root, height=2, width=16, font=("Arial", 24))
text_result.grid(columnspan=5)  # Span across multiple columns

# Create number buttons (1-9, 0)
btn_1 = tk.Button(root, text="1", command=lambda: add_to_calculation(1), width=5, font=("Arial", 14))
btn_1.grid(row=2, column=1)

btn_2 = tk.Button(root, text="2", command=lambda: add_to_calculation(2), width=5, font=("Arial", 14))
btn_2.grid(row=2, column=2)

btn_3 = tk.Button(root, text="3", command=lambda: add_to_calculation(3), width=5, font=("Arial", 14))
btn_3.grid(row=2, column=3)

btn_4 = tk.Button(root, text="4", command=lambda: add_to_calculation(4), width=5, font=("Arial", 14))
btn_4.grid(row=3, column=1)

btn_5 = tk.Button(root, text="5", command=lambda: add_to_calculation(5), width=5, font=("Arial", 14))
btn_5.grid(row=3, column=2)

btn_6 = tk.Button(root, text="6", command=lambda: add_to_calculation(6), width=5, font=("Arial", 14))
btn_6.grid(row=3, column=3)

btn_7 = tk.Button(root, text="7", command=lambda: add_to_calculation(7), width=5, font=("Arial", 14))
btn_7.grid(row=4, column=1)

btn_8 = tk.Button(root, text="8", command=lambda: add_to_calculation(8), width=5, font=("Arial", 14))
btn_8.grid(row=4, column=2)

btn_9 = tk.Button(root, text="9", command=lambda: add_to_calculation(9), width=5, font=("Arial", 14))
btn_9.grid(row=4, column=3)

btn_0 = tk.Button(root, text="0", command=lambda: add_to_calculation(0), width=5, font=("Arial", 14))
btn_0.grid(row=5, column=2)

# Create operator buttons
btn_plus = tk.Button(root, text="+", command=lambda: add_to_calculation("+"), width=5, font=("Arial", 14))
btn_plus.grid(row=2, column=4)

btn_minus = tk.Button(root, text="-", command=lambda: add_to_calculation("-"), width=5, font=("Arial", 14))
btn_minus.grid(row=3, column=4)

btn_mul = tk.Button(root, text="*", command=lambda: add_to_calculation("*"), width=5, font=("Arial", 14))
btn_mul.grid(row=4, column=4)

btn_div = tk.Button(root, text="/", command=lambda: add_to_calculation("/"), width=5, font=("Arial", 14))
btn_div.grid(row=5, column=4)

# Create parentheses buttons
btn_open = tk.Button(root, text="(", command=lambda: add_to_calculation("("), width=5, font=("Arial", 14))
btn_open.grid(row=5, column=1)

btn_close = tk.Button(root, text=")", command=lambda: add_to_calculation(")"), width=5, font=("Arial", 14))
btn_close.grid(row=5, column=3)

# Create clear button (C)
btn_clear = tk.Button(root, text="C", command=clear_field, width=11, bg="red", font=("Arial", 14))
btn_clear.grid(row=6, column=1, columnspan=2)

# Create equals button (=) to calculate the result
btn_equals = tk.Button(root, text="=", command=evaluate_calculation, width=11, bg="green", font=("Arial", 14))  
btn_equals.grid(row=6, column=3, columnspan=2)

# Run the application
root.mainloop()
